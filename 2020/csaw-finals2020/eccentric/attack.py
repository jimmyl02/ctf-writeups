from sage.all import *

p = 4079211623412602159436576854880565404392213421245358163957062650219138441233389311290884236330989600198400158483251311640833420916559186996716661065534756331
E = EllipticCurve(GF(p), [
        2648089252143182574153823745896834765345361977855346851913065097972752819834370636007433949219153563353347621929792473352056603689300142308595500196681484715,
        2640636613554195662803492377273397651071872147133797068159853320493797794760382065905880626537982439844385071174905293170870708493176922431618220384167739340
])

g = E(2835124931680967399292763715241068733082955010482692941778975060177550045565873252916114065386731072675933657202784918206609499173114199830285672822076666812, 3917051964324124246182777370059493628017925319159214920394084902768106573682907256149476836382399752202209827189288072241452544996871460642902049422562450204)
v = E(1201673966464508597332511457607538250497935144691770661539122404983678691094166105235067949576773833297917476372671447578123390251450634078667903889944175974, 2549728089376241701979352238534953850683927781198029880111780652469308144313884103159306596064169377751896432424056208861929610592541122265583809022865481983)

def hensel_lift(curve, p, point):
    A, B = map(long, (E.a4(), E.a6()))
    x, y = map(long, point.xy())

    fr = y**2 - (x**3 + A*x + B)
    t = (- fr / p) % p
    t *= inverse_mod(2 * y, p)  # (y**2)' = 2 * y
    t %= p
    new_y = y + p * t
    return x, new_y

# lift points
x1, y1 = g.xy()
x2, y2 = v.xy()
if 0:
    # Hensel lift can preserve the curve
    x1, y1 = hensel_lift(E, p, g)
    x2, y2 = hensel_lift(E, p, v)
else:
    # we can calso lift by adding random multiple of p
    # just need to compute new curve
    x1 = int(x1)
    x2 = int(x2)
    y1 = int(y1)+p
    y2 = int(y2)+p

# calculate new A, B (actually, they will be the same here)
mod = p ** 2

A2 = y2**2 - y1**2 - (x2**3 - x1**3)
A2 = A2 * inverse_mod(x2 - x1, mod)
A2 %= mod

B2 = y1**2 - x1**3 - A2 * x1
B2 %= mod

# new curve
E2 = EllipticCurve(IntegerModRing(p**2), [A2, B2])

# calculate dlog
g2s = (p - 1) * E2(x1, y1)
v2s = (p - 1) * E2(x2, y2)

x1s, y1s = map(long, g2s.xy())
x2s, y2s = map(long, v2s.xy())

assert (x1s - x1) % p == 0
assert (x2s - x2) % p == 0
dx1 = (x1s - x1) / p
dx2 = (x2s - x2) / p
dy1 = (y1s - y1)
dy2 = (y2s - y2)

m = dy1 * inverse_mod(dx1, p) * dx2 * inverse_mod(dy2, p)
m %= p

print m
